{"version":3,"sources":["logo.svg","App.js","config.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","handleOnSubmit","event","preventDefault","document","getElementById","value","setState","query","state","checkedIn","name","idNumber","newProp","newState","this","ref","child","on","snap","val","className","onSubmit","type","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6KAAAA,EAAOC,QAAU,IAA0B,kC,sKCO3CC,gBCL8B,CAC5BC,OAAQ,0CACRC,WAAY,sCACZC,YAAa,6CACbC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iB,ID0EFC,E,YA1Eb,aAAe,IAAD,8BACZ,+CAuBFC,eAAiB,SAACC,GAChBA,EAAMC,iBACsC,OAAxCC,SAASC,eAAe,MAAMC,OAChC,EAAKC,SAAU,CACbC,MAAOJ,SAASC,eAAe,MAAMC,SA1BzC,EAAKG,MAAQ,CACXC,UAAW,GACXC,KAAM,GACNC,SAAU,GACVJ,MAAO,IANG,E,iFAUMK,EAASC,GAAW,IAAD,OACjCA,EAASN,QAAUO,KAAKN,MAAMD,OAClBjB,aAAoByB,IAAI,YACjBC,MAAMH,EAASN,OAC3BU,GAAG,SAAS,SAAAC,GACnB,EAAKZ,SAAS,CACZG,UAAWS,EAAKF,MAAM,aAAaG,MACnCT,KAAMQ,EAAKF,MAAM,QAAQG,MACzBR,SAAUO,EAAKF,MAAM,YAAYG,a,+BAgBvC,OAAwB,OAApBL,KAAKN,MAAME,KAEX,yBAAKU,UAAU,OACb,gDACA,0BAAMC,SAAUP,KAAKd,gBACjB,2BAAOsB,KAAK,OAAOC,GAAG,OACtB,2BAAOD,KAAK,SAASjB,MAAM,YAE/B,6BACE,kDAIwB,KAArBS,KAAKN,MAAMD,OAAoC,KAApBO,KAAKN,MAAME,KAE7C,yBAAKU,UAAU,OACb,gDACA,0BAAMC,SAAUP,KAAKd,gBACjB,2BAAOsB,KAAK,OAAOC,GAAG,OACtB,2BAAOD,KAAK,SAASjB,MAAM,YAE/B,6BACE,yCAAeS,KAAKN,MAAME,KAA1B,SAAsCI,KAAKN,MAAMG,YAOvD,yBAAKS,UAAU,OACb,gDACA,0BAAMC,SAAUP,KAAKd,gBACjB,2BAAOsB,KAAK,OAAOC,GAAG,OACtB,2BAAOD,KAAK,SAASjB,MAAM,iB,GApErBmB,aEGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS5B,SAASC,eAAe,SD6H3C,kBAAmB4B,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6a43fd1b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport * as firebase from 'firebase';\nimport { firebaseConfig } from './config';\n\nfirebase.initializeApp(firebaseConfig);\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      checkedIn: '',\n      name: '',\n      idNumber: '',\n      query: ''\n    };\n  }\n\n  componentWillUpdate(newProp, newState) {\n    if (newState.query !== this.state.query) {\n      const dbRef = firebase.database().ref('students');\n      let valueRef = dbRef.child(newState.query);\n      valueRef.on('value', snap => {\n        this.setState({\n          checkedIn: snap.child('checkedIn').val(),\n          name: snap.child('name').val(),\n          idNumber: snap.child('idNumber').val()\n        })\n      });\n    }\n  }\n\n  handleOnSubmit = (event) => {\n    event.preventDefault();\n    if (document.getElementById('id').value !== null) {\n      this.setState ({\n        query: document.getElementById('id').value\n      });\n    }\n  }\n\n  render () {\n    if (this.state.name === null) {\n      return (\n        <div className='App'>\n          <h1>Enter Student ID</h1>\n          <form onSubmit={this.handleOnSubmit}>\n              <input type='text' id='id'/>\n              <input type='submit' value='Submit'/>\n          </form>\n          <div>\n            <p>No student found.</p>\n          </div>\n        </div>\n      );\n    } else if (this.state.query !== '' && this.state.name !== '') {\n      return (\n        <div className='App'>\n          <h1>Enter Student ID</h1>\n          <form onSubmit={this.handleOnSubmit}>\n              <input type='text' id='id'/>\n              <input type='submit' value='Submit'/>\n          </form>\n          <div>\n            <p>Checked in {this.state.name}, ID: {this.state.idNumber}</p>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className='App'>\n        <h1>Enter Student ID</h1>\n        <form onSubmit={this.handleOnSubmit}>\n            <input type='text' id='id'/>\n            <input type='submit' value='Submit'/>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","//initialize firebase\n\nexport const firebaseConfig = {\n  apiKey: \"AIzaSyAb2Jf5qmAVRa2p1WqUDEuQ3cSMGZqAq34\",\n  authDomain: \"tfhs-library-system.firebaseapp.com\",\n  databaseURL: \"https://tfhs-library-system.firebaseio.com\",\n  projectId: \"tfhs-library-system\",\n  storageBucket: \"tfhs-library-system.appspot.com\",\n  messagingSenderId: \"1039003252199\",\n  appId: \"1:1039003252199:web:1f03898f29b13521e67942\",\n  measurementId: \"G-708CP9K90Z\"\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}