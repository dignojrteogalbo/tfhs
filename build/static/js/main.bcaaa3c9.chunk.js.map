{"version":3,"sources":["config.js","App.js","admin.js","login.js","serviceWorker.js","index.js"],"names":["Firebase","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","provider","GoogleAuthProvider","App","handleOnSubmit","event","preventDefault","setState","query","document","getElementById","value","state","checkedIn","name","idNumber","oldProp","oldState","this","database","ref","orderByChild","equalTo","once","snap","exists","forEach","child","update","Date","val","className","onSubmit","type","id","toLocaleString","Component","LogIn","auth","signInWithPopup","LogOut","signOut","user","authListener","bind","onAuthStateChanged","uid","localStorage","setItem","removeItem","Boolean","window","location","hostname","match","Index","exact","path","component","Admin","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bcaaa3c9.chunk.js","sourcesContent":["//initialize firebase\nimport * as firebase from 'firebase';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAb2Jf5qmAVRa2p1WqUDEuQ3cSMGZqAq34\",\n  authDomain: \"tfhs-library-system.firebaseapp.com\",\n  databaseURL: \"https://tfhs-library-system.firebaseio.com\",\n  projectId: \"tfhs-library-system\",\n  storageBucket: \"tfhs-library-system.appspot.com\",\n  messagingSenderId: \"1039003252199\",\n  appId: \"1:1039003252199:web:1f03898f29b13521e67942\",\n  measurementId: \"G-708CP9K90Z\"\n};\n\nconst Firebase = firebase.initializeApp(firebaseConfig);\nexport const provider = new firebase.auth.GoogleAuthProvider();\n\nexport default Firebase;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Firebase from './config';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      checkedIn: '',\n      name: '',\n      idNumber: '',\n      query: ''\n    };\n  }\n\n  componentDidUpdate(oldProp, oldState) {\n    if (oldState.query !== this.state.query && this.state.query !== '' && this.state.query !== null) {\n      const dbRef = Firebase.database().ref('students');\n      dbRef\n        .orderByChild('idNumber')\n        .equalTo(this.state.query)\n        .once('value', snap => {\n          if (snap.exists()) {\n            snap.forEach(child => {\n              child.ref.update({\n                checkedIn: new Date()\n              });\n              this.setState({\n                checkedIn: child.child('checkedIn').val(),\n                name: child.child('name').val(),\n                idNumber: child.child('idNumber').val(),\n              });\n            })\n          } else {\n            this.setState({\n              checkedIn: '',\n              name: null,\n              idNumber: null\n            })\n          }\n        });\n    }\n  }\n\n  handleOnSubmit = (event) => {\n    event.preventDefault();\n    this.setState ({\n      query: document.getElementById('id').value\n    });\n  }\n\n  render () {\n    if (this.state.name === null || this.state.idNumber === null) {\n      return (\n        <div className='Form'>\n          <h1>Enter Student ID</h1>\n          <form onSubmit={this.handleOnSubmit}>\n              <input type='number' id='id'/>\n          </form>\n          <div className='Info'>\n            <p>No student found.</p>\n          </div>\n        </div>\n      );\n    } else if (this.state.name !== '' && this.state.checkedIn !== '') {\n      return (\n        <div className='Form'>\n          <h1>Enter Student ID</h1>\n          <form onSubmit={this.handleOnSubmit}>\n              <input type='number' id='id'/>\n          </form>\n          <div className='Info'>\n            <p>Checked in {this.state.name}, ID: {this.state.idNumber}. At {Date(this.state.checkedIn).toLocaleString()}</p>\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div className='Form'>\n        <h1>Enter Student ID</h1>\n        <form onSubmit={this.handleOnSubmit}>\n            <input type='number' id='id'/>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Firebase from './config';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      checkedIn: '',\n      name: '',\n      idNumber: '',\n      query: ''\n    };\n  }\n\n  componentDidUpdate(oldProp, oldState) {\n    if (oldState.query !== this.state.query && this.state.query !== '' && this.state.query !== null) {\n      const dbRef = Firebase.database().ref('students');\n      dbRef\n        .orderByChild('idNumber')\n        .equalTo(this.state.query)\n        .once('value', snap => {\n          if (snap.exists()) {\n            snap.forEach(child => {\n              child.ref.update({\n                checkedIn: new Date()\n              });\n              this.setState({\n                checkedIn: child.child('checkedIn').val(),\n                name: child.child('name').val(),\n                idNumber: child.child('idNumber').val(),\n              });\n            })\n          } else {\n            this.setState({\n              checkedIn: '',\n              name: null,\n              idNumber: null\n            })\n          }\n        });\n    }\n  }\n\n  handleOnSubmit = (event) => {\n    event.preventDefault();\n    this.setState ({\n      query: document.getElementById('id').value\n    });\n  }\n\n  render () {\n    if (this.state.name === null || this.state.idNumber === null) {\n      return (\n        <div className='Form'>\n          <h1>Enter Student ID</h1>\n          <form onSubmit={this.handleOnSubmit}>\n              <input type='number' id='id'/>\n          </form>\n          <div className='Info'>\n            <p>No student found.</p>\n          </div>\n        </div>\n      );\n    } else if (this.state.name !== '' && this.state.checkedIn !== '') {\n      return (\n        <div className='Form'>\n          <h1>Enter Student ID</h1>\n          <form onSubmit={this.handleOnSubmit}>\n              <input type='number' id='id'/>\n          </form>\n          <div className='Info'>\n            <p>Checked in {this.state.name}, ID: {this.state.idNumber}. At {Date(this.state.checkedIn).toLocaleString()}</p>\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div className='Form'>\n        <h1>Enter Student ID</h1>\n        <form onSubmit={this.handleOnSubmit}>\n            <input type='number' id='id'/>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\nimport './App.css';\n\nimport Firebase, { provider } from './config';\n\nclass LogIn extends Component {\n  constructor() {\n    super();\n    this.state = {\n      user: null,\n    }\n    this.authListener = this.authListener.bind(this);\n  }\n\n  componentDidMount() {\n    this.authListener();\n  }\n\n  authListener() {\n    Firebase\n      .auth()\n      .onAuthStateChanged(user => {\n        if (user) {\n          this.setState({\n            user: user.uid\n          });\n          localStorage.setItem('user', user.uid);\n        } else {\n          this.setState({\n            user: null,\n          });\n          localStorage.removeItem('user');\n        }\n      });\n  }\n\n  handleOnSubmit = (event) => {\n    event.preventDefault();\n    Firebase.auth().signInWithPopup(provider);\n  }\n\n  LogOut = (event) => {\n    event.preventDefault();\n    Firebase.auth().signOut();\n  }\n\n  render () {\n    return (\n      <div className='Form'>\n        <h1>Log-In Page</h1>\n        <h1>Logged in as {this.state.user}</h1>\n        <form onSubmit={this.handleOnSubmit}>\n          <input type='submit' value='Log-in using your Google Account'/>\n        </form>\n        <form onSubmit={this.LogOut}>\n          <input type='submit' value='Log Out'/>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default LogIn;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport Admin from './admin';\nimport LogIn from './login';\nimport * as serviceWorker from './serviceWorker';\n\nclass Index extends Component {\n  render () {\n    return (\n      <Router>\n        <Route exact path='/' component={App}/>\n        <Route exact path='/login' component={LogIn}/>\n        <Route exact path='/admin' component={Admin}/>\n      </Router>\n    );\n  }\n}\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}